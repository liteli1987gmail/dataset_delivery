# --------------------------------------------------------------
# 这是数据研磨的第二步：
# 读取seatable url，
# 提取 markdown，
# 指代消解，并存回seatable
# --------------------------------------------------------------


import seatable
import kimi


# 未处理新闻=seatable.取未处理新闻()   #取回来一个数组，包含多条

# #for 处理 未处理新闻
# print(f"--- 本次需要处理： {len(未处理新闻)}")
# for 当前研磨数据 in 未处理新闻:
#         print(当前研磨数据)
#         # 获得单URL 第一轮指代消解 处理结果
#         最终合并文本=kimi.单篇文章第一轮研磨(当前研磨数据["新闻日期"],当前研磨数据["url"])

#         #存入 seatable
#         row_data = {
#                 "新闻时间": 当前研磨数据['新闻日期'],
#                 "url": 当前研磨数据['url'],
#                 "第一轮指代消解": 最终合并文本,
#                 "第二轮状态":"未处理"}
#         seatable.存入KIMI第一轮研磨(row_data)
#         #修改 当前研磨数据 对应这套的 状态，从“未处理”改为“已处理”
#         seatable.修改新闻URL接口记录状态(当前研磨数据,"已处理")




#---------------------------------  并发执行 -------------------------------
import concurrent.futures
def 处理新闻(当前研磨数据):
    print(当前研磨数据)
    # 获得单URL 第一轮指代消解 处理结果
    最终合并文本=kimi.单篇文章第一轮研磨(当前研磨数据["新闻日期"],当前研磨数据["url"])

    # 如果 最终合并文本=None ，则跳过
    if 最终合并文本==None:
        print(" ！！！！！！！！！！！！！处理新闻：遇到 Sohu广告页面，暂停！！！")
        exit(0)

    #存入 seatable
    row_data = {
            "新闻时间": 当前研磨数据['新闻日期'],
            "url": 当前研磨数据['url'],
            "第一轮指代消解": 最终合并文本,
            "第二轮状态":"未处理"}
    
    # # 如果 最终合并文本 包含 “未找到核心内容”  就提示我，并且exit
    # if "未找到核心内容" in 最终合并文本:
    #     print("未找到核心内容")
    #     exit(0)

    seatable.存入KIMI第一轮研磨(row_data)
    #修改 当前研磨数据 对应这套的 状态，从“未处理”改为“已处理”
    seatable.修改新闻URL接口记录状态(当前研磨数据,"已处理")


#循环 100 次
for i in range(1):
    print(i)
    未处理新闻=seatable.取未处理新闻()
    with concurrent.futures.ThreadPoolExecutor(max_workers=1) as executor:
        executor.map(处理新闻, 未处理新闻)
